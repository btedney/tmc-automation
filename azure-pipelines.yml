variables: 
- name: resource_group
  value: tmc-bootstrap-automation
- name: storage_account
  value: tfstate01tmc
- name: service_connection
  value: warroyo-se-azure
trigger:
  branches:
    include:
      - main
  paths:
    include:
      - "cluster_yaml/*"
      - "terraform/*"
stages:
  - stage: validate
    jobs:
    - job: validate
      continueOnError: false
      steps:
      - task: TerraformInstaller@0
        displayName: "Install Terraform"
        inputs:
          terraformVersion: '1.5.4'
      - task: TerraformTaskV4@4
        displayName: 'init'
        inputs:
          provider: 'azurerm'
          command: 'init'
          backendServiceArm: $(service_connection) # service connection created during setup
          backendAzureRmResourceGroupName: $(resource_group)
          backendAzureRmStorageAccountName: $(storage_account)
          backendAzureRmContainerName: 'tfstate'
          backendAzureRmKey: 'terraform.tfstate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
      - task: TerraformTaskV4@4
        displayName: 'validate'
        inputs:
          provider: 'azurerm'
          command: 'validate'
          
  - stage: plan
    dependsOn: [validate]
    condition: succeeded('validate')
    jobs:
      - job: terraform_plan
        steps:
              - checkout: self
              - task: TerraformInstaller@0
                displayName: 'install'
                inputs:
                  terraformVersion: '1.5.4'
              - task: TerraformTaskV4@4
                displayName: 'init'
                inputs:
                  inputs:
                  provider: 'azurerm'
                  command: 'init'
                  backendServiceArm: $(service_connection)
                  backendAzureRmResourceGroupName: $(resource_group)
                  backendAzureRmStorageAccountName: $(storage_account)
                  backendAzureRmContainerName: 'tfstate'
                  backendAzureRmKey: 'terraform.tfstate'
                  workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
              - task: TerraformTaskV4@4
                displayName: 'plan'
                inputs:
                  provider: 'azurerm'
                  command: 'plan'
                  environmentServiceNameAzureRM: $(service_connection)
                  workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'

  - stage: apply
    dependsOn: [plan]
    condition: succeeded('plan')
    jobs:
      - job: terraform_apply
        steps:
              - checkout: self
              - task: TerraformInstaller@0
                displayName: 'install'
                inputs:
                  terraformVersion: '1.5.4'
              - task: TerraformTaskV4@4
                displayName: 'init'
                inputs:
                  inputs:
                  provider: 'azurerm'
                  command: 'init'
                  backendServiceArm: $(service_connection)
                  backendAzureRmResourceGroupName: $(resource_group)
                  backendAzureRmStorageAccountName: $(storage_account)
                  backendAzureRmContainerName: 'tfstate'
                  backendAzureRmKey: 'terraform.tfstate'
                  workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
              - task: TerraformTaskV4@4
                displayName: 'apply'
                inputs:
                  provider: 'azurerm'
                  command: 'apply'
                  environmentServiceNameAzureRM: $(service_connection)
                  workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
  - stage: template
    dependsOn: [apply]
    condition: succeeded('apply')
    jobs:
      - job: template_files
        steps:
            - checkout: self
              persistCredentials: true
              
            - task: UsePythonVersion@0
              inputs:
                versionSpec: '3.x' 
            - task: TerraformInstaller@0
              displayName: 'install'
              inputs:
                terraformVersion: '1.5.4'
            - task: TerraformTaskV4@4
              displayName: 'init'
              inputs:
                inputs:
                provider: 'azurerm'
                command: 'init'
                backendServiceArm: $(service_connection)
                backendAzureRmResourceGroupName: $(resource_group)
                backendAzureRmStorageAccountName: $(storage_account)
                backendAzureRmContainerName: 'tfstate'
                backendAzureRmKey: 'terraform.tfstate'
                workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
            - task: TerraformTaskV4@4
              displayName: 'output'
              name: tfoutput
              inputs:
                provider: 'azurerm'
                command: 'output'
                environmentServiceNameAzureRM: $(service_connection)
                workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
            - script: |
                python -m pip install --upgrade pip
                pip install copier
              displayName: 'Install Python dependencies'
            - task: PythonScript@0
              inputs:
                scriptSource: 'filePath'
                scriptPath: '$(System.DefaultWorkingDirectory)/pipeline-scripts/generate-flux.py'
                arguments:  '$(tfoutput.jsonOutputVariablesPath)'
                workingDirectory: '$(System.DefaultWorkingDirectory)/pipeline-scripts'
                failOnStderr: true # boolean. Fail on standard error. Default: false.
            - script: |
                git config --global user.email tmc-ado-automation@vmware.com & git config --global user.name "ado"
              workingDirectory: $(System.DefaultWorkingDirectory)
            - script: |
                git checkout -b $(Build.BuildNumber)
                git add -A
                git commit -m "generating flux repo structure $(Build.BuildNumber)"
                git push --set-upstream origin $(Build.BuildNumber) 
              displayName: push flux repo structure
              workingDirectory: $(System.DefaultWorkingDirectory)

            # - task: CreatePullRequest@1
            #   inputs:
            #     repoType: 'GitHub'
            #     githubEndpoint: 'warroyo'
            #     githubRepository: '$(Build.Repository.Name)'
            #     sourceBranch: '$(Build.SourceBranch)'
            #     targetBranch: 'main'
            #     title: 'generate flux structure'